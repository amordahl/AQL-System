/* QuestionParser.java */
/* Generated By:JavaCC: Do not edit this line. QuestionParser.java */
package de.foellix.aql.datastructure.handler;
import de.foellix.aql.datastructure.KeywordsAndConstants;
import de.foellix.aql.datastructure.handler.QuestionHandler;

public class QuestionParser implements QuestionParserConstants {
  private QuestionHandler questionHandler = new QuestionHandler();

  public QuestionHandler getQuestionHandler()
  {
    return questionHandler;
  }

  final public void query() throws ParseException {
questionHandler.startQuery();
    label_1:
    while (true) {
      questionOrOperator();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPERATOR1:
      case OPERATOR2:
      case OPERATOR3:
      case SOIS1:
      case SOIS2:
      case STRING:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  final public void questionOrOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SOIS1:
    case SOIS2:{
questionHandler.startQuestion();
      question();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FEATURING:{
        jj_consume_token(FEATURING);
        features();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case USES:{
        jj_consume_token(USES);
        uses();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(16);
questionHandler.endQuestion();
      break;
      }
    case STRING:{
      answer();
      jj_consume_token(17);
      break;
      }
    case OPERATOR1:
    case OPERATOR2:
    case OPERATOR3:{
      operator();
questionHandler.endOperator();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void features() throws ParseException {
    feature();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 18:{
      jj_consume_token(18);
      features();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  final public void feature() throws ParseException {Token t;
    t = jj_consume_token(STRING);
questionHandler.addFeature(t.toString());
  }

  final public void uses() throws ParseException {
    use();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 18:{
      jj_consume_token(18);
      uses();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  final public void use() throws ParseException {Token t;
    t = jj_consume_token(STRING);
questionHandler.addUse(t.toString());
  }

  final public void questions() throws ParseException {
    questionOrOperator();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 18:{
      jj_consume_token(18);
      questions();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  final public void operator() throws ParseException {Token t1;
  Token t2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OPERATOR2:{
      t1 = jj_consume_token(OPERATOR2);
questionHandler.startOperator(t1.toString());
      jj_consume_token(19);
      questions();
      jj_consume_token(20);
      break;
      }
    case OPERATOR1:{
      t1 = jj_consume_token(OPERATOR1);
questionHandler.startOperator(t1.toString());
      jj_consume_token(19);
      questionOrOperator();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 21:{
        jj_consume_token(21);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          pair();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 21:{
            jj_consume_token(21);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case SOIS1:{
              t2 = jj_consume_token(SOIS1);
              break;
              }
            case SOIS2:{
              t2 = jj_consume_token(SOIS2);
              break;
              }
            default:
              jj_la1[7] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
questionHandler.setFilterSOI(t2.toString());
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            ;
          }
          break;
          }
        case SOIS1:
        case SOIS2:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SOIS1:{
            t2 = jj_consume_token(SOIS1);
            break;
            }
          case SOIS2:{
            t2 = jj_consume_token(SOIS2);
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
questionHandler.setFilterSOI(t2.toString());
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(20);
      break;
      }
    case OPERATOR3:{
      t1 = jj_consume_token(OPERATOR3);
questionHandler.startOperator(t1.toString());
      jj_consume_token(19);
      questions();
      jj_consume_token(20);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void pair() throws ParseException {Token t1;
  Token t2;
    t1 = jj_consume_token(STRING);
    jj_consume_token(22);
    t2 = jj_consume_token(STRING);
questionHandler.setFilterNameValuePair(t1.toString(), t2.toString());
  }

  final public void question() throws ParseException {Token token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SOIS1:{
      token = jj_consume_token(SOIS1);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FROM:{
        fromTo();
        break;
        }
      case IN:{
        in();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
questionHandler.setMode(token.toString());
      break;
      }
    case SOIS2:{
      token = jj_consume_token(SOIS2);
      in();
questionHandler.setMode(token.toString());
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void fromTo() throws ParseException {
    jj_consume_token(FROM);
    reference();
questionHandler.setReferenceType(KeywordsAndConstants.REFERENCE_TYPE_FROM);
    questionHandler.addReference();
    jj_consume_token(TO);
    reference();
questionHandler.setReferenceType(KeywordsAndConstants.REFERENCE_TYPE_TO);
    questionHandler.addReference();
  }

  final public void in() throws ParseException {
    jj_consume_token(IN);
    reference();
questionHandler.addReference();
  }

  final public void reference() throws ParseException {Token t1;
  Token t2;
  Token t3;
  Token t4;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 23:{
      jj_consume_token(23);
      jj_consume_token(24);
      t1 = jj_consume_token(STRING);
      jj_consume_token(25);
      jj_consume_token(26);
questionHandler.setStatement(t1.toString());
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 27:{
      jj_consume_token(27);
      jj_consume_token(24);
      t2 = jj_consume_token(STRING);
      jj_consume_token(25);
      jj_consume_token(26);
questionHandler.setMethod(t2.toString());
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 28:{
      jj_consume_token(28);
      jj_consume_token(24);
      t3 = jj_consume_token(STRING);
      jj_consume_token(25);
      jj_consume_token(26);
questionHandler.setClass(t3.toString());
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(29);
    jj_consume_token(24);
    t4 = jj_consume_token(STRING);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 21:{
      preprocessors();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(25);
questionHandler.setApp(t4.toString());
  }

  final public void preprocessors() throws ParseException {
    preprocessor();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 21:{
      preprocessors();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
  }

  final public void preprocessor() throws ParseException {Token token;
    jj_consume_token(21);
    token = jj_consume_token(STRING);
questionHandler.addPreprocessor(token.toString());
  }

  final public void answer() throws ParseException {Token token;
    token = jj_consume_token(STRING);
questionHandler.addAnswer(token.toString());
  }

  /** Generated Token Manager. */
  public QuestionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfc00,0x100,0x200,0xfc00,0x40000,0x40000,0x40000,0x6000,0x200000,0x6000,0xe000,0x200000,0x1c00,0x60,0x6000,0x800000,0x8000000,0x10000000,0x200000,0x200000,};
   }

  /** Constructor with InputStream. */
  public QuestionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public QuestionParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new QuestionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public QuestionParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new QuestionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public QuestionParser(QuestionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(QuestionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[30];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 30; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
